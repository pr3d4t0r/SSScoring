'\" t
.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "ssscoring" "3" "" "Version 2.10.0" "Speed Skydiving Scoring API documentation"
.SH Name
\f[B]SSScoring\f[R] \- Speed Skydiving Scoring high level library in
Python
.SH Synopsis
.IP
.EX
pip install \-U ssscoring
.EE
.PP
Have one or more FlySight speed run track files available (can be v1 or
v2), set the source directory to the data lake containing them.
.IP
.EX
\f[I]# synopsys.py\f[R]
\f[B]from\f[R] ssscoring.calc \f[B]import\f[R] aggregateResults
\f[B]from\f[R] ssscoring.calc \f[B]import\f[R] processAllJumpFiles
\f[B]from\f[R] ssscoring.calc \f[B]import\f[R] roundedAggregateResults
\f[B]from\f[R] ssscoring.flysight \f[B]import\f[R] getAllSpeedJumpFilesFrom

DATA_LAKE = \(aq./resources\(aq \f[I]# can be anywhere\f[R]
jumpResults = processAllJumpFiles(getAllSpeedJumpFilesFrom(DATA_LAKE))
print(roundedAggregateResults(aggregateResults(jumpResults)))
.EE
.PP
Output:
.IP
.EX
python synopsys.py
                           score  5.0  10.0  15.0  20.0  25.0  finalTime  maxSpeed
01\-00\-00:v2                  472  181   329   420   472   451       24.7       475
resources test\-data\-00:v1    443  175   299   374   427   449       25.0       449
resources test\-data\-01:v1    441  176   305   388   432   442       25.0       442
resources test\-data\-02:v1    451  164   295   387   441   452       25.0       453
.EE
.PP
[IMAGE: \c
.UR https://github.com/pr3d4t0r/SSScoring/blob/master/resources/SSScoring-speed-run-summary.png?raw=true
Speed run summary example
.UE \c
] Speed run summary example:
https://raw.githubusercontent.com/pr3d4t0r/SSScoring/refs/heads/master/resources/SSScoring\-speed\-run\-summary.png
.PP
SSScoring processes all FlySight files (tagged as v1 or v2, depending on
the device) and SkyTrax files.
It aggregates and summarizes the results.
Full API documentation is available at:
.PP
https://pr3d4t0r.github.io/SSScoring/ssscoring.html
.PP
SSScore app is available for interactive scoring from:
.PP
https://ssscore.streamlit.app
.SH Installation and Requirements
.IP \(bu 2
Python 3.9.9 or later
.IP \(bu 2
pandas and NumPy
.PP
The requirements.txt file lists all the packages required for running
SSScoring or using the API.
.SH Quickstart
.IP \(bu 2
The SSScoring interactive quickstart notebook for Jupyter/Lucyfer is the
fastest way to learn how to use the library
.IP \(bu 2
The \f[CR]ssscore\f[R] command line tool implements the same
functionality as the interactive quickstart, can be used for scoring
speed skydives from the command line with minimum installation
.IP \(bu 2
Read the SSScoring API documentation
.SS SSScore web tool
Analyze single tracks or a group of tracks using the SSScoring API in a
full\-featured web application.
Requires Internet connectivity.
.PP
URL: SSScore 2
.SS ssscore command line tool
\f[CR]ssscore\f[R] is a comnand line tool that scores one or more speed
skydiving files with as little user participation as possible.
It supports options for specifying the DZ altitude MSL in feet and for
\(lqsimple training output\(rq that shows rounded speed values, useful
for physical log book updates.
.IP
.EX
ssscore \-e 616 \-t ./TRACKS
.EE
.PP
Produces this outout:
.IP
.EX
elevation = 187.76 m (616.00\(aq)
Processing speed tracks in quickstart\-example/...

                                   score  5.0  10.0  ...  25.0  finalTime  maxSpeed
R3_13\-32\-20:v2                       490  187   333  ...   490       24.2       493
quickstart\-example R1_09\-20\-26:v1    325  135   211  ...   319       25.0       328
quickstart\-example R2_11\-00\-34:v1    476  185   333  ...   315       24.9       481

[3 rows x 8 columns]

Total score = 1291.00, mean speed = 430.33
.EE
.PP
See the \f[CR]ssscore\f[R] man page for details on this quickstart tool.
.SH Running the stand\-alone apps
While the web\-based app shows the single and multiple jumps scoring
functions as part of a single app, they are two distinct executables.
During development and for local execution, it\(cqs easier to run them
from the command line.
.PP
These commands assume that the code is installed in a Python virtual
environment and that the \f[CR]streamlit\f[R] package is installed.
.PP
\f[B]Prepare the local run\-time environment\f[R]
.PP
Installs all the required packages via \f[CR]pip \-e .\f[R] in the
\f[CR]local\f[R] target, and it only needs to run once per session, and
only after \f[CR]make test\f[R] or \f[CR]make clean\f[R].
.IP
.EX
make local
.EE
.PP
\f[B]Scoring a multiple jumps set\f[R]
.IP
.EX
\f[I]# installs all the required packages via pip \-e .\f[R]
\f[I]# it only needs to run once per session, and only after make test or make clean\f[R]
make local
streamlit run ssscoring/ssscoremultiple.py
.EE
.PP
\f[B]Scoring and analyzing a single jump\f[R]
.IP
.EX
make local
streamlit run ssscoring/ssscoresingle.py
.EE
.PP
These commands will start a new SSScore instance, current branch
version, in the system\(cqs default web browser.
.SH Description
SSScoring provides analsysis tools for individual or bulk processing of
FlySight GPS competition data gathered during speed skydiving training
and competition.
Scoring methodology adheres to International Skydiving Commission (ISC),
International Speed Skydiving Association (ISSA), and United States
Parachute Association (USPA) published competition and scoring rules.
Though FlySight is the only Speed Measuring Device (SMD) accepted by all
these organizations, SSScoring libraries and tools also operate with
track data files produced by these devices:
.IP \(bu 2
FlySight 1
.IP \(bu 2
FlySight 2
.IP \(bu 2
SkyTrax GPS and barometric device
.PP
SSScoring leverages data manipulation tools in the pandas and NumPy data
analysis libraries.
All the SSScoring code is written in pure Python, but the implementation
leverages libraries that may require native code for GPU and AI chipset
support like Nvidia and M\-chipsets.
.SS Features
.IP \(bu 2
Pure Python
.IP \(bu 2
Supports output from FlySight versions v1 and v2, and SkyTrax devices
.IP \(bu 2
Automatic file version detection
.IP \(bu 2
Bulk file processing via data lake scanning
.IP \(bu 2
Automatic selection of FlySight\-like files mixed among files of
multiple types and from different applications and operating systems
.IP \(bu 2
Individual file processing
.IP \(bu 2
Automatic jump file validation according to competition rules
.IP \(bu 2
Automatic skydiver exit detection
.IP \(bu 2
Automatic jump scoring with robust error detection based on exit
altitude, break off altitude, scoring window, and validation window
.IP \(bu 2
Produces time series dataframes for the speed run, summary data in
5\-second intervals, scoring window, speed skydiver track angle with
respect to the ground, horizontal distance from exit, etc.
.IP \(bu 2
Reports max speed, exit altitude, scoring window end, distance traveled
from exit, and other data relevant to competitors during training
.IP \(bu 2
Internal data representation includes SI and Imperial units;
implementers may choose either one when working with the API
.PP
The latest SSScoring API is available on GitHub:
https://pr3d4t0r.github.io/SSScoring/ssscoring.html
.PP
The SSScoring package can be installed into any Python environment
version 3.9 or later.
https://pypi.org/project/ssscoring
.PP
SSScoring also includes Lucyfer/Jupyter notebooks for dataset
exploratory analysis and for code troubleshooting.
Unit test coverage is greater than 92%, limited only by
Jupyter\-specific components that can\(cqt be tested in a standalone
environment.
.SS What is a data lake?
A \f[B]data lake\f[R] is a files repository that stores data in its raw,
unprocessed form.
A speed skydiving data lake often has one or more of these types of
files:
.IP \(bu 2
FlySight versions 1 or 2 files
.IP \(bu 2
SkyTrax files
.IP \(bu 2
Video files (MP4 or MOV of whatever)
.IP \(bu 2
PDFs of meet bulletins and related event information
.IP \(bu 2
Miscellaneous other junk
.PP
SSScoring identifies FlySight and SkyTrax files regardless of what other
file types are available in the data lake.
SSScoring also identifies speed files from other types of tracks
(e.g.\ wingsuit) based on the performance profile and scoring windows.
Tell the SSScoring tools where to get all the track files, even if they
are several levels deep in the directory structure, and SSScoring will
find, validate, and score only the speed skydiving files regardless of
what else is available in the data lake.
The only limitation is available memory.
SSScoring has been tested with as many as 467 speed files during a
single run, representing all the training files for a competitive
skydiver over 10 months.
.SS Additional tools
.IP \(bu 2
\f[CR]nospot\f[R] shell script for disabling Spotlight scanning of
FlySight file systems
.IP \(bu 2
\f[CR]umountFlySight\f[R] Mac app and shell script for safe unmounting
of a FlySight device from a Macintosh computer
.SH Contributors
.PP
.TS
tab(@);
l l.
T{
Name
T}@T{
GitHub
T}
_
T{
Jochen Althoff
T}@T{
\(atQuadriga14193
T}
T{
Eugene Ciurana
T}@T{
\(atpr3d4t0r
T}
T{
Michael Cooper
T}@T{
\(atFlySight
T}
T{
Nik Daniel
T}@T{
n/a
T}
T{
Alexey Galda
T}@T{
\(atalexgalda
T}
T{
Marco Hepp
T}@T{
n/a
T}
T{
Stepan Sgibnev
T}@T{
\(atkotek14
T}
.TE
.SH See Also
SSScoring API documentation \- github.io SSScore app on\-line \-
Streamlit Cloud ssscore(1)
https://github.com/pr3d4t0r/SSScoring/blob/master/ssscore.md
.SH License
The \f[B]SSScoring\f[R] package, documentation and examples are licensed
under the \c
.UR https://github.com/pr3d4t0r/SSScoring/blob/master/LICENSE.txt
BSD\-3 open source license
.UE \c
\&.
